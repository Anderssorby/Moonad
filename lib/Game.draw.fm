// Renders a sprite to a image
Game.draw(sprites: List(Game.Sprite), screen: Image3D): Image3D
  def nil
    Pair.new<,>(0u, screen)
  def cons(sprite, state)
    get idx screen = state
    get sprite_mid sprite_pos sprite_ang sprite_vox = sprite
    let voxel_count = Image3D.get_size(sprite_vox)
    for i : U32 = 0u .. voxel_count with screen:
      let pos = Image3D.get_pos(i, sprite_vox)
      let c_x = Pos32.get_x(sprite_mid)
      let c_y = Pos32.get_y(sprite_mid)
      let p_x = Pos32.get_x(pos)
      let p_y = Pos32.get_y(pos)
      let p_z = Pos32.get_z(pos)
      get p_x p_y = Game.rotate2d(c_x, c_y, p_x, p_y, sprite_ang)
      let p_x = U32.add(U32.sub(p_x, U32.div(p_z, 2u)), Pos32.get_x(sprite_pos))
      let p_y = U32.add(U32.sub(p_y, U32.div(p_z, 2u)), Pos32.get_y(sprite_pos))
      let p_z = U32.add(p_z, Pos32.get_z(sprite_pos))
      let pos = Pos32.new(p_x, p_y, p_z)
      let screen
        = Image3D.set_pos
        | U32.add(i,idx);
        | pos;
        | screen;
      let screen
        = Image3D.set_col
        | U32.add(i,idx);
        | Image3D.get_col(i,sprite_vox);
        | screen;
      screen
    Pair.new<,>(U32.add(voxel_count, idx), screen)
  let fold = List.fold<Game.Sprite>(sprites)
  get idx screen = fold<Pair(U32,Image3D)>(nil, cons)
  screen
  
