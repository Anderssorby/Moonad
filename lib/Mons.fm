
Mons.placa: Image3D
  Image3D.parse("787880ffffff7978800000007a78800000007b78800000007c78800000007d78800000007e78800000007f7880000000807880000000817880000000827880000000837880000000847880000000857880000000867880000000877880ffffff787980ffffff7979800000007a7980a8a8a87b7980a8a8a87c79800000007d79800000007e79800000007f7980000000807980000000817980000000827980000000837980a8a8a8847980a8a8a8857980000000867980000000877980000000787a80ffffff797a80ffffff7a7a800000007b7a800000007c7a80ffffff7d7a80ffffff7e7a80ffffff7f7a80ffffff807a80ffffff817a80ffffff827a80ffffff837a80000000847a80000000857a80d0d0d0867a80a8a8a8877a80000000787b80ffffff797b800000007a7b800000007b7b800000007c7b800000007d7b800000007e7b800000007f7b80000000807b80000000817b80000000827b80000000837b80000000847b80000000857b80000000867b80a8a8a8877b80000000787c80000000797c80d0d0d07a7c80d0d0d07b7c80d0d0d07c7c80d0d0d07d7c80d0d0d07e7c80d0d0d07f7c80d0d0d0807c80d0d0d0817c80d0d0d0827c80d0d0d0837c80d0d0d0847c80d0d0d0857c80d0d0d0867c80000000877c80000000787d80000000797d80ffffff7a7d80a8a8a87b7d80ffffff7c7d80ffffff7d7d80ffffff7e7d80ffffff7f7d80ffffff807d80ffffff817d80ffffff827d80a8a8a8837d80a8a8a8847d80ffffff857d80ffffff867d80000000877d80000000787e80000000797e80ffffff7a7e80a8a8a87b7e80a8a8a87c7e80ffffff7d7e80a8a8a87e7e80ffffff7f7e80a8a8a8807e80a8a8a8817e80ffffff827e80a8a8a8837e80a8a8a8847e80ffffff857e80a8a8a8867e80000000877e80000000787f80000000797f80ffffff7a7f80ffffff7b7f80ffffff7c7f80ffffff7d7f80ffffff7e7f80ffffff7f7f80ffffff807f80ffffff817f80ffffff827f80ffffff837f80ffffff847f80ffffff857f80ffffff867f80000000877f80000000788080000000798080ffffff7a8080a8a8a87b8080a8a8a87c8080ffffff7d8080ffffff7e8080ffffff7f8080ffffff808080ffffff818080ffffff828080a8a8a8838080ffffff848080a8a8a8858080ffffff868080000000878080000000788180000000798180ffffff7a8180a8a8a87b8180a8a8a87c8180ffffff7d8180a8a8a87e8180ffffff7f8180a8a8a8808180a8a8a8818180ffffff828180a8a8a8838180ffffff848180a8a8a8858180ffffff868180000000878180000000788280000000798280ffffff7a8280ffffff7b8280ffffff7c8280ffffff7d8280ffffff7e8280ffffff7f8280ffffff808280ffffff818280ffffff828280ffffff838280ffffff848280ffffff858280ffffff868280000000878280000000788380ffffff7983800000007a83800000007b83800000007c83800000007d83800000007e83800000007f8380000000808380000000818380000000828380000000838380000000848380000000858380000000868380a8a8a8878380000000788480ffffff798480d0d0d07a8480ffffff7b8480d0d0d07c8480ffffff7d8480ffffff7e8480ffffff7f8480d0d0d0808480ffffff818480d0d0d0828480d0d0d0838480a8a8a8848480000000858480ffffff868480a8a8a8878480000000788580ffffff798580d0d0d07a8580ffffff7b8580d0d0d07c8580ffffff7d8580ffffff7e8580d0d0d07f8580ffffff808580d0d0d0818580d0d0d0828580a8a8a8838580a8a8a8848580000000858580d0d0d0868580a8a8a8878580000000788680ffffff798680ffffff7a8680ffffff7b8680ffffff7c8680ffffff7d8680ffffff7e8680ffffff7f8680d0d0d0808680ffffff818680d0d0d0828680a8a8a8838680a8a8a8848680000000858680a8a8a8868680a8a8a8878680000000788780ffffff798780ffffff7a8780ffffff7b8780ffffff7c8780ffffff7d8780ffffff7e8780ffffff7f8780ffffff808780d0d0d0818780ffffff828780d0d0d0838780d0d0d0848780a8a8a8858780000000868780000000878780a8a8a8")

// Um tile do jogo
T Mons.Tile
| Mons.Tile.new(tid: U32);

// Um mapa 2d contendo vários tiles
Mons.Map: Type
  Map(Mons.Tile)

// Cria um mapa vazio
Mons.Map.new: Mons.Map
  Map.new<>

// Adiciona um tile em uma determinada posição de um mapa
Mons.Map.set(pos: Pos32, tile: Mons.Tile, map: Mons.Map): Mons.Map
  Map.set<>(U32.to_bits(pos), tile, map)

// Retorna a imagem de um determinado tile
Mons.tid_to_image3d(tid: U32): Image3D
  Mons.assets.char_011 // por enquanto só temos a plaquinha no código

// Um mapa de exemplo com 4 plaquinhas
Mons.example_map: Map(Mons.Tile)
  let tile = Mons.Tile.new(0u)
  let map = Mons.Map.new
  let map = Mons.Map.set(Pos32.new(0u, 0u, 0u), tile, map)
  let map = Mons.Map.set(Pos32.new(1u, 0u, 0u), tile, map)
  let map = Mons.Map.set(Pos32.new(0u, 1u, 0u), tile, map)
  let map = Mons.Map.set(Pos32.new(1u, 1u, 0u), tile, map)
  let map = Mons.Map.set(Pos32.new(4u, 4u, 0u), tile, map)
  let map = Mons.Map.set(Pos32.new(2u, 0u, 0u), tile, map)
  map

// Teste: converte o mapa que a gente criou em uma lista de (pos, tile)
Mons.example_sprites: List(Game.Sprite)
  let mid_pos = Pos32.new(128u,128u,0u)
  let sprites = Map.to_list<>(Mons.example_map)
  let sprites
    = List.map<Pair(Bits, Mons.Tile), Game.Sprite>
    | (pair)
      get pos tile = pair
      let tile_pos = Pos32.scale(Bits.to_u32(pos), 16u)
      let tile_ang = 0u
      let tile_img = Mons.assets.char_011 // TODO: change to the actual image
      Game.Sprite.new(mid_pos, tile_pos, tile_ang, tile_img);
    | sprites;
  sprites

Mons: App(U32)
  let wall = Kaelin.Models.wall
  let chest = Kaelin.Models.chest
  let seat = Kaelin.Models.seat
  let screen = Image3D.alloc_size(524288u)
  def init
    0u
  def draw(state)
    let mid_pos = Pos32.new(128u,128u,0u)
    //let sprites = [
      //Game.Sprite.new(mid_pos, Pos32.new(0u,0u,0u), state, wall),
      //Game.Sprite.new(mid_pos, Pos32.new(32u,0u,0u), state, chest),
      //Game.Sprite.new(mid_pos, Pos32.new(64u,0u,0u), 0u, Mons.placa),
    //]
    let sprites = Mons.example_sprites

    App.Render.vox(Game.draw(sprites, screen))
  def when(event, state)
    case event:
    | init => [];
    | tick => [App.Action.state<>(U32.add(state, 1u))];
    | xkey => [];
    | post => [];
  App.new<>(init, draw, when)
