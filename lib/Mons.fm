// enter_animation: quando você entra em um tile
// - grass walk animation
// - grass jump animation
// - ground jump animation (fumacinha)

// Exemplo de stack:
// [
//   [(GRASS, z=1)],
//   [(BUSH_BACK, z=2), (BUSH_FRONT, z=16)]
//   [(HERO, z=4..28), (BUSH_ANIM, z=30)]
// ]

// bush_back.png (16x16, a parte de trás do arbusto)
// bush_front.png (16x16, a parte de frente do arbusto)
// bush_anim_000.png (uns 3 frames, 16x16, a animação no arbusto)
// pedir pra maisa: adicionar Z nos voxels das imagens

Mons.placa: Image3D
  Image3D.parse("")

// A Mons sprite
T Mons.Sprite
| Mons.Sprite.new(x: U32, y: U32, z: U32, img: Image3D);

// A direction
T Mons.Dir
| Mons.Dir.right;
| Mons.Dir.up;
| Mons.Dir.left;
| Mons.Dir.down;

// A game object
T Mons.Object
| Mons.Object.new(
  tid: U32,      // object id, represent its kind
  //pos: Pos32,    // object position on the tile set
  dir: Mons.Dir, // direction the object is facing
  wlk: U32       // number of walk frames to animate
);

// A 2d map of game tiles
Mons.Map: Type
  Map(List(Mons.Object))

// The global game state
T Mons.Game
| Mons.Game.new(
  pos: Pos32, // main hero position
  map: Mons.Map // the game map
);

// Constants
Mons.VOID: U32
  0u

Mons.HERO: U32
  1u

Mons.GRASS: U32
  2u

Mons.BUSH: U32
  3u

Mons.PLANT_0: U32
  4u

// The void tile
Mons.Object.void: Mons.Object
  Mons.Object.new(Mons.VOID, Mons.Dir.down, 0u)

// Gets an object's direction
Mons.Object.get_dir(obj: Mons.Object): Mons.Dir
  case obj:
  | obj.dir;

// Sets an object's direction
Mons.Object.set_dir(obj: Mons.Object, dir: Mons.Dir): Mons.Object
  case obj:
  | Mons.Object.new(obj.tid, dir, obj.wlk);

// Gets an object's walk animation frames
Mons.Object.get_wlk(obj: Mons.Object): U32
  case obj:
  | obj.wlk;

// Sets an object's walk animation frames
Mons.Object.set_wlk(obj: Mons.Object, wlk: U32): Mons.Object
  case obj:
  | Mons.Object.new(obj.tid, obj.dir, wlk);

// Returns the image of a tile
Mons.Object.get_images(t_x: U32, t_y: U32, obj: Mons.Object): List(Image3D)
  case obj:
  | if U32.eql(obj.tid, Mons.VOID) then
      []
    else if U32.eql(obj.tid, Mons.HERO) then
      //0 = parado
      //1 = pe direito pra frente
      //2 = pe esquerdo pra frente
      //let wlk_num = 
      if U32.eql(obj.wlk, 0u) then
        case obj.dir:
        | right => [Mons.Assets.boy_r_0];
        | up    => [Mons.Assets.boy_u_0];
        | left  => [Mons.Assets.boy_l_0];
        | down  => [Mons.Assets.boy_d_0];
      else
        if U32.eql(U32.mod(U32.add(t_x,t_y),2u), 0u) then
          case obj.dir:
          | right => [Mons.Assets.boy_r_1];
          | up    => [Mons.Assets.boy_u_1];
          | left  => [Mons.Assets.boy_l_1];
          | down  => [Mons.Assets.boy_d_1];
        else
          case obj.dir:
          | right => [Mons.Assets.boy_r_2];
          | up    => [Mons.Assets.boy_u_2];
          | left  => [Mons.Assets.boy_l_2];
          | down  => [Mons.Assets.boy_d_2];
    else if U32.eql(obj.tid, Mons.GRASS) then
      [Mons.Assets.grass_0]
    else if U32.eql(obj.tid, Mons.BUSH) then
      [Mons.Assets.bush_0, Mons.Assets.bush_1]
    else if (U32.eql(obj.tid, Mons.PLANT_0)) then
      [Mons.Assets.home_decor_plant_0]
    else
      [];

// An empty map
Mons.Map.new: Mons.Map
  Map.new<>

// Adds a tile to a position on the map
Mons.Map.set(pos: Pos32, objs: List(Mons.Object), map: Mons.Map): Mons.Map
  Map.set<>(U32.to_bits(pos), objs, map)

// Gets the tile stored on a position on the map
Mons.Map.get(pos: Pos32, map: Mons.Map): List(Mons.Object)
  case Map.get<>(U32.to_bits(pos), map) as got:
  | [Mons.Object.void];
  | got.value;

// Pushes an object to the top of a tile
Mons.Map.push(pos: Pos32, obj: Mons.Object, map: Mons.Map): Mons.Map
  let objs = Mons.Map.get(pos, map)
  let objs = List.cons<>(obj, objs)
  Mons.Map.set(pos, objs, map)

// Pops an object from the top of a tile
Mons.Map.pop(pos: Pos32, map: Mons.Map): Pair(Mons.Map, Mons.Object)
  let objs = Mons.Map.get(pos, map)
  case objs:
  | Pair.new<,>(map, Mons.Object.void);
  | let map = Mons.Map.set(pos, objs.tail, map)
    Pair.new<,>(map, objs.head);

// Converts a tile code (ex: ".g") into a list of obs
Mons.Map.tile_of(code: String): List(Mons.Object)
  if String.eql(code, ".g") then
    [Mons.Object.new(Mons.GRASS, Mons.Dir.down, 0u)]
  else if String.eql(code, "bg") then
    [
      Mons.Object.new(Mons.BUSH, Mons.Dir.down, 0u),
      Mons.Object.new(Mons.GRASS, Mons.Dir.down, 0u)
    ]
  else if String.eql(code, "hg") then
    [
      Mons.Object.new(Mons.HERO, Mons.Dir.down, 0u),
      Mons.Object.new(Mons.GRASS, Mons.Dir.down, 0u)
    ]
  else if String.eql(code, "pg") then
    [
      Mons.Object.new(Mons.PLANT_0, Mons.Dir.down, 0u),
      Mons.Object.new(Mons.GRASS, Mons.Dir.down, 0u)
    ]
  else
    []

// Converts a string map source to an actual map
Mons.Map.load(code: String): Mons.Map
  let code = String.slice(1, Nat.pred(String.length(code)), code)
  let rows = String.split(code, "\n")
  let rows = List.map<,>(String.chunks_of(2), rows)
  let mapw = List.length.u32<>(rows)
  let maph = List.length.u32<>(List.head_with_default<>([], rows))
  let objs = List.map<,>(List.map<,>(Mons.Map.tile_of), rows)
  let objs = List.flatten<>(objs)
  List.ifoldr.u32<,>
  | Mons.Map.new;
  | (i, objs, map)
    let o_x = U32.sub(2048u, U32.div(mapw, 2u))
    let o_y = U32.sub(2048u, U32.div(maph, 2u))
    let p_x = U32.add(U32.mod(i, mapw), o_x)
    let p_y = U32.add(U32.div(i, maph), o_y)
    let p_z = 0u
    let pos = Pos32.new(p_x, p_y, p_z)
    Mons.Map.set(pos, objs, map);
  | objs;

// Gets the hero position
Mons.Game.get_hero_pos(game: Mons.Game): Pos32
  case game:
  | game.pos;

// Sets the hero position
Mons.Game.set_hero_pos(pos: Pos32, game: Mons.Game): Mons.Game
  case game:
  | Mons.Game.new(pos, game.map);

// Moves the hero to a given direction
Mons.Game.move_hero(dir: Mons.Dir, game: Mons.Game): Mons.Game
  let old_pos
    = Mons.Game.get_hero_pos(game)
  let new_pos
    = case dir:
    | Pos32.add(old_pos, Pos32.new(1u, 0u, 0u));
    | Pos32.sub(old_pos, Pos32.new(0u, 1u, 0u));
    | Pos32.sub(old_pos, Pos32.new(1u, 0u, 0u));
    | Pos32.add(old_pos, Pos32.new(0u, 1u, 0u));
  let game
    = case game:
    | let map = game.map
      get map obj = Mons.Map.pop(old_pos, map)
      let wlk = Mons.Object.get_wlk(obj)
      if U32.eql(wlk, 0u) then
        let obj = Mons.Object.set_dir(obj, dir)
        let obj = Mons.Object.set_wlk(obj, 16u)
        let map = Mons.Map.push(new_pos, obj, map)
        Mons.Game.new(new_pos, map)
      else
        let map = Mons.Map.push(old_pos, obj, map)
        Mons.Game.new(old_pos, map);
  game

// Given a tile (x, y) and an object, returns its global (x, y) positions
Mons.draw.global_xy(t_x: U32, t_y: U32, obj: Mons.Object): Pair(U32, U32)
  case obj:
  | let wlk = Mons.Object.get_wlk(obj)
    let dir = Mons.Object.get_dir(obj)
    let g_x = U32.mul(t_x, 16u)
    let g_y = U32.mul(t_y, 16u)
    let g_x
      = case dir:
      | right => U32.sub(g_x, wlk);
      | up    => g_x;
      | left  => U32.add(g_x, wlk);
      | down  => g_x;
    let g_y
      = case dir:
      | right => g_y;
      | up    => U32.add(g_y, wlk);
      | left  => g_y;
      | down  => U32.sub(g_y, wlk);
    Pair.new<,>(g_x, g_y);

// Converts the game state to a list of sprites to be rendered
Mons.game_sprites(game: Mons.Game): List(Mons.Sprite)
  case game:
  | let sprites = List.nil<>
    let c_x = Pos32.get_x(game.pos)
    let c_y = Pos32.get_y(game.pos)
    let c_z = Pos32.get_z(game.pos)
    for x : U32 = 0u .. 19u with sprites:
      for y : U32 = 0u .. 19u with sprites:
        let t_x = U32.add(U32.sub(c_x, 9u), x)
        let t_y = U32.add(U32.sub(c_y, 9u), y)
        let t_z = c_z
        let pos = Pos32.new(t_x, t_y, t_z)
        let got = Map.get<>(U32.to_bits(pos), game.map)
        case got:
        | sprites;
        | List.foldl<,>
          | sprites;
          | (sprites, obj)
            // TODO: for some reason, using a `case obj` here causes the
            // function not to type check anymore. Investigate why.
            List.foldl<,>
            | sprites;
            | (sprites, img)
              let wlk = Mons.Object.get_wlk(obj)
              let dir = Mons.Object.get_dir(obj)
              get s_x s_y = Mons.draw.global_xy(t_x, t_y, obj)
              let s_z = t_z
              let spr = Mons.Sprite.new(s_x, s_y, s_z, img)
              List.cons<>(spr, sprites)
            ;
            | Mons.Object.get_images(t_x, t_y, obj);;
          | got.value;;
      sprites
    sprites;

// Draws the game to screen
Mons.draw(
  sprites  : List(Mons.Sprite),
  hero_pos : Pos32,
  hero_obj : Mons.Object,
  scr      : Image3D
): Image3D
  // Initial state (idx, scr)
  def init
    Pair.new<,>(0u, scr)
  // For each sprite...
  def next(sprite, state)
    get idx scr = state
    case sprite:
    | // For each voxel...
      let voxel_count = Image3D.get_size(sprite.img)
      for i : U32 = 0u .. voxel_count with scr:
        // The game screen is 256x256 pixels
        let s_w = 128u
        let s_h = 128u
        // The origin global position (centered on hero)
        let h_x = Pos32.get_x(hero_pos)
        let h_y = Pos32.get_y(hero_pos)
        //let o_x = U32.mul(Pos32.get_x(hero_pos), 16u)
        //let o_y = U32.mul(Pos32.get_y(hero_pos), 16u)
        get o_x o_y = Mons.draw.global_xy(h_x, h_y, hero_obj)
        // Gets the sprite global position
        let s_x = sprite.x
        let s_y = sprite.y
        let s_z = sprite.z
        // Gets the voxel global position (its cpos on img is x=128, y=128)
        let xyz = Image3D.get_pos(i, sprite.img)
        let v_x = U32.sub(U32.add(Pos32.get_x(xyz),s_x),128u)
        let v_y = U32.sub(U32.add(Pos32.get_y(xyz),s_y),128u)
        let v_z = Pos32.get_z(xyz)
        // Temporary: if voxel is out of screen, make it invisible
        let ok0 = U32.lte(U32.sub(o_x, s_w), v_x) // o_x - s_w <= v_x
        let ok1 = U32.ltn(v_x, U32.add(o_x, s_w)) // v_x < o_x + s_w
        let ok2 = U32.lte(U32.sub(o_y, s_h), v_y) // o_y - s_h <= v_y
        let ok3 = U32.ltn(v_y, U32.add(o_y, s_h)) // v_y < o_y + s_h
        //let ok  = List.and([ok0, ok1, ok2, ok3])
        let ok  = Bool.and(ok0, Bool.and(ok1, Bool.and(ok2, ok3)))
        // Computes the voxel position on the final canvas
        let c_x = U32.sub(U32.add(v_x, 128u), o_x)
        let c_y = U32.sub(U32.add(v_y, 128u), o_y)
        let c_z = Bool.if<>(ok, v_z, 0u)
        // Push the voxel to the scr (on the next idx)
        let pos = Pos32.new(c_x, c_y, c_z)
        let col = Image3D.get_col(i, sprite.img)
        let scr = Image3D.set_pos(U32.add(i, idx), pos, scr)
        let scr = Image3D.set_col(U32.add(i, idx), col, scr);
        scr
      // Returns new to-write idx and updated screen
      Pair.new<,>(U32.add(voxel_count, idx), scr);
  // Performs the algorithm above and returns the resulting image
  get idx scr = List.fold<>(sprites)<>(init, next)
  Image3D.set(idx, 0u, 0u, scr) // null-terminated voxel sequence

// For each tick, updates an object
Mons.Object.tick(obj: Mons.Object): Mons.Object
  case obj:
  | let tid = obj.tid
    let dir = obj.dir
    let wlk =
      if U32.gtn(obj.wlk, 0u) then
        U32.sub(obj.wlk, 1u)
      else
        obj.wlk
    Mons.Object.new(tid, dir, wlk);

// For each tick, updates the game state
Mons.Game.tick(game: Mons.Game): Mons.Game
  case game:
  | let pos = game.pos
    let map = 
      def with_tile(objs)
        def with_obj(obj)
          Mons.Object.tick(obj)
        List.map<,>(with_obj, objs)
      Map.map<,>(with_tile, game.map)
    Mons.Game.new(pos, map);

// Examples
// ========

// An example map
//Mons.example_map: Mons.Map
  //let grass = Mons.Object.new(Mons.GRASS, Mons.Dir.down)
  //let hero = Mons.Object.new(Mons.HERO, Mons.Dir.down)
  //let bush = Mons.Object.new(Mons.BUSH, Mons.Dir.down)
  //let map = Mons.Map.new
  //let map = Mons.Map.set(Pos32.new(2047u, 2047u, 0u), [
    //grass,
    //bush,
  //], map)
  //let map = Mons.Map.set(Pos32.new(2048u, 2047u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2049u, 2047u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2047u, 2048u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2048u, 2048u, 0u), [
    //hero,
    //grass,
  //], map)
  //let map = Mons.Map.set(Pos32.new(2049u, 2048u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2047u, 2049u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2048u, 2049u, 0u), [grass], map)
  //let map = Mons.Map.set(Pos32.new(2049u, 2049u, 0u), [grass], map)
  //map

Mons.example_map: Mons.Map
  Mons.Map.load(Mons.map_source)

// An example game
Mons.example_game: Mons.Game
  Mons.Game.new(Pos32.new(2048u, 2048u, 0u), Mons.example_map)

// Converts a keyboard key to a direction:
// A = [-1,  0,  0]
// D = [ 1,  0,  0]
// W = [ 0, -1,  0]
// S = [ 0,  1,  0]
// * = [ 0,  0,  0]
Mons.key_to_dir(key_code: U16): Maybe(Mons.Dir)
  if U16.eql(key_code, 'A') then
    Maybe.some<>(Mons.Dir.left)
  else if U16.eql(key_code, 'D') then
    Maybe.some<>(Mons.Dir.right)
  else if U16.eql(key_code, 'W') then
    Maybe.some<>(Mons.Dir.up)
  else if U16.eql(key_code, 'S') then
    Maybe.some<>(Mons.Dir.down)
  else
    Maybe.none<>

// The entire game as an App
Mons: App(Mons.Game)
  let wall = Kaelin.Models.wall
  let chest = Kaelin.Models.chest
  let seat = Kaelin.Models.seat
  let screen = Image3D.alloc_size(524288u)
  def init
    Mons.example_game
  def draw(game)
    case game:
    | let hero_pos = game.pos;
      let hero_obj = List.head_with_default<>
        | Mons.Object.void;
        | Mons.Map.get(hero_pos, game.map);
      App.Render.vox(Mons.draw(
        Mons.game_sprites(game),
        hero_pos,
        hero_obj,
        screen));
  def when(event, game)
    case event:
    | init => [];
    | tick => [
      App.Action.state<>(Mons.Game.tick(game))
    ];
    | xkey => [
      App.Action.print<>(Bits.to_string(U16.to_bits(event.code))),
      if event.down then
        let move_dir = Mons.key_to_dir(event.code)
        let new_game
          = case move_dir:
          | game;
          | Mons.Game.move_hero(move_dir.value, game);
        App.Action.state<>(new_game)
      else
        App.Action.state<>(game)
    ];
    | post => [];
  App.new<>(init, draw, when)
