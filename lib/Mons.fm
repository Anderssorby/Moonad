// enter_animation: quando você entra em um tile
// - grass walk animation
// - grass jump animation
// - ground jump animation (fumacinha)

// Exemplo de stack:
// [
//   [(GRASS, z=0)],
//   [(BUSH_BACK, z=1), (BUSH_FRONT, z=3)]
//   [(HERO, z=2), (BUSH_ANIM, z=4)]
// ]
// png -> buffer 

// bush_back.png (16x16, a parte de trás do arbusto)
// bush_front.png (16x16, a parte de frente do arbusto)
// bush_anim_000.png (uns 3 frames, 16x16, a animação no arbusto)

// pedir pra maisa: adicionar Z nos voxels das imagens

Mons.minus.1: U32
  4095u

Mons.placa: Image3D
  Image3D.parse("")

// A game object
T Mons.Object
| Mons.Object.new(
  tid: U32,
  img: List(Image3D)
);

// A 2d map of game tiles
Mons.Map: Type
  Map(List(Mons.Object))

// The global game state
T Mons.Game
| Mons.Game.new(
  pos: Pos32, // main hero position
  map: Mons.Map // the game map
);

// The void tile
Mons.Object.void: Mons.Object
  Mons.Object.new(0u, [Mons.placa])

// Returns the image of a tile
Mons.Object.get_images(tile: Mons.Object): List(Image3D)
  case tile:
  | tile.img;

// An empty map
Mons.Map.new: Mons.Map
  Map.new<>

// Adds a tile to a position on the map
Mons.Map.set(pos: Pos32, objs: List(Mons.Object), map: Mons.Map): Mons.Map
  Map.set<>(U32.to_bits(pos), objs, map)

// Retorna a imagem de um determinado tile
Mons.tid_to_image3d(tid: U32): Image3D
  Mons.assets.char_011 // por enquanto só temos a plaquinha no código

// Pushes an object to the top of a tile
Mons.Map.push(pos: Pos32, obj: Mons.Object, map: Mons.Map): Mons.Map
  let objs = Mons.Map.get(pos, map)
  let objs = List.cons<>(obj, objs)
  Mons.Map.set(pos, objs, map)

// Pops an object from the top of a tile
Mons.Map.pop(pos: Pos32, map: Mons.Map): Pair(Mons.Object, Mons.Map)
  let objs = Mons.Map.get(pos, map)
  case objs:
  | Pair.new<,>(Mons.Object.void, map);
  | let map = Mons.Map.set(pos, objs.tail, map)
    Pair.new<,>(objs.head, map);

// Gets the hero position
Mons.Game.get_hero_pos(game: Mons.Game): Pos32
  case game:
  | game.pos;

// Swaps two positions on the game's map
Mons.Game.map_swap(a: Pos32, b: Pos32, game: Mons.Game): Mons.Game
  case game:
  | let map = game.map
    let t_a = Mons.Map.get(a, map)
    let t_b = Mons.Map.get(b, map)
    let map = Mons.Map.set(a, t_b, map)
    let map = Mons.Map.set(b, t_a, map)
    Mons.Game.new(game.pos, map);

// Sets the hero position
Mons.Game.set_hero_pos(pos: Pos32, game: Mons.Game): Mons.Game
  case game:
  | Mons.Game.new(pos, game.map);

// Moves the hero to a given direction
Mons.Game.move_hero(dir: Pos32, game: Mons.Game): Mons.Game
  let old_hero_pos = Mons.Game.get_hero_pos(game)
  let new_hero_pos = Pos32.add(old_hero_pos, dir)
  let game = Mons.Game.map_swap(old_hero_pos, new_hero_pos, game)
  let game = Mons.Game.set_hero_pos(new_hero_pos, game)
  game

// Converts the game map to a list of sprites (to be rendered)
// TODO: improve this code's aesthetics (less identing?)
// TODO: why Formality can't infer the Pair(_,_)?
Mons.render_map(map: Mons.Map): List(Game.Sprite)
  let mid_pos = Pos32.new(128u,128u,0u)
  let sprites
    = List.map<_,_>
    | (tile: Pair(_,_))
      get pos objs = tile
      List.map<_,_>
      | (obj)
        let obj_pos = Pos32.scale(Bits.to_u32(pos), 16u)
        let obj_ang = 0u
        List.map<_,_>
        | (img) Game.Sprite.new(mid_pos, obj_pos, obj_ang, img);
        | Mons.Object.get_images(obj);;
      | objs;;
    | Map.to_list<List(Mons.Object)>(map);
  let sprites = List.flatten<>(sprites)
  let sprites = List.flatten<>(sprites)
  sprites

// Converts the game state to a list of sprites (to be rendered)
Mons.render_game(game: Mons.Game): List(Game.Sprite)
  case game:
  | Mons.render_map(game.map);

// Examples
// ========

// An example map
Mons.example_map: Mons.Map
  let tile_grass = Mons.Object.new(0u, [Mons.assets.tile_grass])
  let tile_chest = Mons.Object.new(0u, [Mons.assets.tile_chest])
  let map = Mons.Map.new
  let map = Mons.Map.set(Pos32.new(0u, 0u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(1u, 0u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(2u, 0u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(0u, 1u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(1u, 1u, 0u), [tile_chest], map)
  let map = Mons.Map.set(Pos32.new(2u, 1u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(0u, 2u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(1u, 2u, 0u), [tile_grass], map)
  let map = Mons.Map.set(Pos32.new(2u, 2u, 0u), [tile_grass], map)
  map

// An example game
Mons.example_game: Mons.Game
  Mons.Game.new(Pos32.new(1u, 1u, 0u), Mons.example_map)

// Example sprites
Mons.example_sprites: List(Game.Sprite)
  Mons.render_game(Mons.example_game)

// Converts a keyboard key to a direction:
// A = [-1,  0,  0]
// D = [ 1,  0,  0]
// W = [ 0, -1,  0]
// S = [ 0,  1,  0]
// * = [ 0,  0,  0]
Mons.key_to_dir(key_code: U16): Pos32
  if U16.eql(key_code, 'A') then
    Pos32.new(Mons.minus.1, 0u, 0u)
  else if U16.eql(key_code, 'D') then
    Pos32.new(1u, 0u, 0u)
  else if U16.eql(key_code, 'W') then
    Pos32.new(0u, Mons.minus.1, 0u)
  else if U16.eql(key_code, 'S') then
    Pos32.new(0u, 1u, 0u)
  else
    Pos32.new(0u, 0u, 0u)

Mons: App(Mons.Game)
  let mid_pos = Pos32.new(128u,128u,0u)
  let wall = Kaelin.Models.wall
  let chest = Kaelin.Models.chest
  let seat = Kaelin.Models.seat
  let screen = Image3D.alloc_size(524288u)
  def init
    Mons.example_game
  def draw(game)
    App.Render.vox(Game.draw(Mons.render_game(game), screen))
  def when(event, game)
    case event:
    | init => [];
    | tick => [];
    | xkey => [
      App.Action.print<>(Bits.to_string(U16.to_bits(event.code))),
      if event.down then
        let move_dir = Mons.key_to_dir(event.code)
        let new_game = Mons.Game.move_hero(move_dir, game)
        App.Action.state<>(new_game)
      else
        App.Action.state<>(game)
    ];
    | post => [];
  App.new<>(init, draw, when)
