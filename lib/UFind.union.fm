UFind.union(uf: UFind, path1: Bits, path2: Bits): UFind
  get uf root_path1 rank1 = UFind.find(uf, path1)
  get uf root_path2 rank2 = UFind.find(uf, path2)
  case Bits.eql(root_path1, root_path2):
  | uf;
  | case Nat.cmp(rank1, rank2):
    | let uf = Map.set<>(root_path1, UNode.link(root_path2), uf)
      uf;
    | let uf = Map.set<>(root_path1, UNode.link(root_path2), uf)
      let uf = Map.set<>(root_path2, UNode.root(Nat.succ(rank2)), uf)
      uf;
    | let uf = Map.set<>(root_path1, UNode.root(rank2), uf)
      let uf = Map.set<>(root_path2, UNode.link(root_path1), uf)
      uf;;
