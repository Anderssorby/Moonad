VoxModel.parse(voxdata: String): VoxModel
  let voxsize = U32.div(U32.length(voxdata), U.32(0d12))
  let voxmodel = VoxModel.alloc_size(voxsize);
  U32.for<VoxModel>(voxmodel, U.32(0d0), voxsize)
  | (i, voxmodel)
    let x = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d0)), voxdata)
    let y = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d1)), voxdata)
    let z = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d2)), voxdata)
    let r = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d3)), voxdata)
    let g = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d4)), voxdata)
    let b = VoxModel.parse_byte(U32.add(U32.mul(i, U.32(0d6)), U.32(0d5)), voxdata)
    let voxmodel = VoxModel.set_col(i, Col32.new(r,g,b,U.32(0d255)), voxmodel)
    let voxmodel = VoxModel.set_pos(i, Pos32.new(x,y,z), voxmodel)
    voxmodel;
