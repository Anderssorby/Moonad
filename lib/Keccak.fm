Keccak.uncompress(buf: Buffer32): Buffer32
  def shr    = U32.shr
  def mod    = U32.mod
  def add    = U32.add
  get dep _ = buf
  let udep = Nat.add(dep, 2)
  let ubuf = Buffer32.alloc(udep)
  for i : U32 = 0u .. Nat.to_u32(Nat.pow(2, dep)) with ubuf:
    let j  = U32.mul(4u, i)
    let w  = Buffer32.get(i, buf)
    let b0 = mod(w, 256u)
    let w  = shr(w, 8u)
    let b1 = mod(w, 256u)
    let w  = shr(w, 8u)
    let b2 = mod(w, 256u)
    let b3 = shr(w, 8u)
    let ubuf = Buffer32.set(j, b0, ubuf)
    let ubuf = Buffer32.set(add(j, 1u), b1, ubuf)
    let ubuf = Buffer32.set(add(j, 2u), b2, ubuf)
    let ubuf = Buffer32.set(add(j, 3u), b3, ubuf)
    ubuf
  ubuf

Keccak.compress(buf: Buffer32): Buffer32
  def shl    = U32.shl
  def add    = U32.add
  get dep _ = buf
  let cdep = Nat.sub(dep, 2)
  let cbuf = Buffer32.alloc(cdep)
  for i : U32 = 0u .. Nat.to_u32(Nat.pow(2, cdep)) with cbuf:
    let j  = U32.mul(4u, i)
    let b0 = Buffer32.get(j, buf)
    let b1 = Buffer32.get(add(j, 1u), buf)
    let b2 = Buffer32.get(add(j, 2u), buf)
    let b3 = Buffer32.get(add(j, 3u), buf)
    let w  = add(b0, shl(add(b1, shl(add(b2, shl(b3, 8u)), 8u)), 8u))
    Buffer32.set(i, w, cbuf)
  cbuf

Keccak.RC: Buffer32
  let arr = Buffer32.alloc(6)
  let arr = Buffer32.set(0u,  1u,          arr)
  let arr = Buffer32.set(1u,  0u,          arr)
  let arr = Buffer32.set(2u,  32898u,      arr)
  let arr = Buffer32.set(3u,  0u,          arr)
  let arr = Buffer32.set(4u,  32906u,      arr)
  let arr = Buffer32.set(5u,  2147483648u, arr)
  let arr = Buffer32.set(6u,  2147516416u, arr)
  let arr = Buffer32.set(7u,  2147483648u, arr)
  let arr = Buffer32.set(8u,  32907u,      arr)
  let arr = Buffer32.set(9u,  0u,          arr)
  let arr = Buffer32.set(10u, 2147483649u, arr)
  let arr = Buffer32.set(11u, 0u,          arr)
  let arr = Buffer32.set(12u, 2147516545u, arr)
  let arr = Buffer32.set(13u, 2147483648u, arr)
  let arr = Buffer32.set(14u, 32777u,      arr)
  let arr = Buffer32.set(15u, 2147483648u, arr)
  let arr = Buffer32.set(16u, 138u,        arr)
  let arr = Buffer32.set(17u, 0u,          arr)
  let arr = Buffer32.set(18u, 136u,        arr)
  let arr = Buffer32.set(19u, 0u,          arr)
  let arr = Buffer32.set(20u, 2147516425u, arr)
  let arr = Buffer32.set(21u, 0u,          arr)
  let arr = Buffer32.set(22u, 2147483658u, arr)
  let arr = Buffer32.set(23u, 0u,          arr)
  let arr = Buffer32.set(24u, 2147516555u, arr)
  let arr = Buffer32.set(25u, 0u,          arr)
  let arr = Buffer32.set(26u, 139u,        arr)
  let arr = Buffer32.set(27u, 2147483648u, arr)
  let arr = Buffer32.set(28u, 32905u,      arr)
  let arr = Buffer32.set(29u, 2147483648u, arr)
  let arr = Buffer32.set(30u, 32771u,      arr)
  let arr = Buffer32.set(31u, 2147483648u, arr)
  let arr = Buffer32.set(32u, 32770u,      arr)
  let arr = Buffer32.set(33u, 2147483648u, arr)
  let arr = Buffer32.set(34u, 128u,        arr)
  let arr = Buffer32.set(35u, 2147483648u, arr)
  let arr = Buffer32.set(36u, 32778u,      arr)
  let arr = Buffer32.set(37u, 0u,          arr)
  let arr = Buffer32.set(38u, 2147483658u, arr)
  let arr = Buffer32.set(39u, 2147483648u, arr)
  let arr = Buffer32.set(40u, 2147516545u, arr)
  let arr = Buffer32.set(41u, 2147483648u, arr)
  let arr = Buffer32.set(42u, 32896u,      arr)
  let arr = Buffer32.set(43u, 2147483648u, arr)
  let arr = Buffer32.set(44u, 2147483649u, arr)
  let arr = Buffer32.set(45u, 0u,          arr)
  let arr = Buffer32.set(46u, 2147516424u, arr)
  let arr = Buffer32.set(47u, 2147483648u, arr)
  arr

Keccak.f(arr: Buffer32): Buffer32
  // Local definitions, for readability
  def read   = Buffer32.get
  def write  = Buffer32.set
  def update = Buffer32.mut
  def or     = U32.or
  def xor    = U32.xor
  def xors   = U32.xors
  def not    = U32.not
  def and    = U32.and
  def shl    = U32.shl
  def shr    = U32.shr
  def add    = U32.add

  let arr = Keccak.compress(arr)
  for i : U32 = 0u .. 24u with arr:
    let n = U32.mul(2u, i)
    let c0 = xors(5)(read(0u, arr), read(10u, arr), read(20u, arr), read(30u, arr), read(40u, arr))
    let c1 = xors(5)(read(1u, arr), read(11u, arr), read(21u, arr), read(31u, arr), read(41u, arr))
    let c2 = xors(5)(read(2u, arr), read(12u, arr), read(22u, arr), read(32u, arr), read(42u, arr))
    let c3 = xors(5)(read(3u, arr), read(13u, arr), read(23u, arr), read(33u, arr), read(43u, arr))
    let c4 = xors(5)(read(4u, arr), read(14u, arr), read(24u, arr), read(34u, arr), read(44u, arr))
    let c5 = xors(5)(read(5u, arr), read(15u, arr), read(25u, arr), read(35u, arr), read(45u, arr))
    let c6 = xors(5)(read(6u, arr), read(16u, arr), read(26u, arr), read(36u, arr), read(46u, arr))
    let c7 = xors(5)(read(7u, arr), read(17u, arr), read(27u, arr), read(37u, arr), read(47u, arr))
    let c8 = xors(5)(read(8u, arr), read(18u, arr), read(28u, arr), read(38u, arr), read(48u, arr))
    let c9 = xors(5)(read(9u, arr), read(19u, arr), read(29u, arr), read(39u, arr), read(49u, arr))

    let h   = xor(c8, or(shl(c2, 1u), shr(c3, 31u)))
    let l   = xor(c9, or(shl(c3, 1u), shr(c2, 31u)))
    let arr = update(0u,  xor(h), arr)
    let arr = update(1u,  xor(l), arr)
    let arr = update(10u, xor(h), arr)
    let arr = update(11u, xor(l), arr)
    let arr = update(20u, xor(h), arr)
    let arr = update(21u, xor(l), arr)
    let arr = update(30u, xor(h), arr)
    let arr = update(31u, xor(l), arr)
    let arr = update(40u, xor(h), arr)
    let arr = update(41u, xor(l), arr)

    let h   = xor(c0, or(shl(c4, 1u), shr(c5, 31u)))
    let l   = xor(c1, or(shl(c5, 1u), shr(c4, 31u)))
    let arr = update(2u, xor(h), arr)
    let arr = update(3u,  xor(l), arr)
    let arr = update(12u,  xor(h), arr)
    let arr = update(13u, xor(l), arr)
    let arr = update(22u, xor(h), arr)
    let arr = update(23u, xor(l), arr)
    let arr = update(32u, xor(h), arr)
    let arr = update(33u, xor(l), arr)
    let arr = update(42u, xor(h), arr)
    let arr = update(43u, xor(l), arr)

    let h   = xor(c2, or(shl(c6, 1u), shr(c7, 31u)))
    let l   = xor(c3, or(shl(c7, 1u), shr(c6, 31u)))
    let arr = update(4u,  xor(h), arr)
    let arr = update(5u,  xor(l), arr)
    let arr = update(14u, xor(h), arr)
    let arr = update(15u, xor(l), arr)
    let arr = update(24u, xor(h), arr)
    let arr = update(25u, xor(l), arr)
    let arr = update(34u, xor(h), arr)
    let arr = update(35u, xor(l), arr)
    let arr = update(44u, xor(h), arr)
    let arr = update(45u, xor(l), arr)

    let h   = xor(c4, or(shl(c8, 1u), shr(c9, 31u)))
    let l   = xor(c5, or(shl(c9, 1u), shr(c8, 31u)))
    let arr = update(6u,  xor(h), arr)
    let arr = update(7u,  xor(l), arr)
    let arr = update(16u, xor(h), arr)
    let arr = update(17u, xor(l), arr)
    let arr = update(26u, xor(h), arr)
    let arr = update(27u, xor(l), arr)
    let arr = update(36u, xor(h), arr)
    let arr = update(37u, xor(l), arr)
    let arr = update(46u, xor(h), arr)
    let arr = update(47u, xor(l), arr)

    let h   = xor(c6, or(shl(c0, 1u), shr(c1, 31u)))
    let l   = xor(c7, or(shl(c1, 1u), shr(c0, 31u)))
    let arr = update(8u,  xor(h), arr)
    let arr = update(9u,  xor(l), arr)
    let arr = update(18u, xor(h), arr)
    let arr = update(19u, xor(l), arr)
    let arr = update(28u, xor(h), arr)
    let arr = update(29u, xor(l), arr)
    let arr = update(38u, xor(h), arr)
    let arr = update(39u, xor(l), arr)
    let arr = update(48u, xor(h), arr)
    let arr = update(49u, xor(l), arr)

    let b00 = read(0u, arr)
    let b01 = read(1u, arr)
    let b32 = or(shl(read(11u, arr),  4u), shr(read(10u, arr), 28u))
    let b33 = or(shl(read(10u, arr),  4u), shr(read(11u, arr), 28u))
    let b14 = or(shl(read(20u, arr),  3u), shr(read(21u, arr), 29u))
    let b15 = or(shl(read(21u, arr),  3u), shr(read(20u, arr), 29u))
    let b46 = or(shl(read(31u, arr),  9u), shr(read(30u, arr), 23u))
    let b47 = or(shl(read(30u, arr),  9u), shr(read(31u, arr), 23u))
    let b28 = or(shl(read(40u, arr), 18u), shr(read(41u, arr), 14u))
    let b29 = or(shl(read(41u, arr), 18u), shr(read(40u, arr), 14u))
    let b20 = or(shl(read(2u,  arr),  1u), shr(read(3u,  arr), 31u))
    let b21 = or(shl(read(3u,  arr),  1u), shr(read(2u,  arr), 31u))
    let b02 = or(shl(read(13u, arr), 12u), shr(read(12u, arr), 20u))
    let b03 = or(shl(read(12u, arr), 12u), shr(read(13u, arr), 20u))
    let b34 = or(shl(read(22u, arr), 10u), shr(read(23u, arr), 22u))
    let b35 = or(shl(read(23u, arr), 10u), shr(read(22u, arr), 22u))
    let b16 = or(shl(read(33u, arr), 13u), shr(read(32u, arr), 19u))
    let b17 = or(shl(read(32u, arr), 13u), shr(read(33u, arr), 19u))
    let b48 = or(shl(read(42u, arr), 02u), shr(read(43u, arr), 30u))
    let b49 = or(shl(read(43u, arr), 02u), shr(read(42u, arr), 30u))
    let b40 = or(shl(read(5u,  arr), 30u), shr(read(4u,  arr),  2u))
    let b41 = or(shl(read(4u,  arr), 30u), shr(read(5u,  arr),  2u))
    let b22 = or(shl(read(14u, arr), 06u), shr(read(15u, arr), 26u))
    let b23 = or(shl(read(15u, arr), 06u), shr(read(14u, arr), 26u))
    let b04 = or(shl(read(25u, arr), 11u), shr(read(24u, arr), 21u))
    let b05 = or(shl(read(24u, arr), 11u), shr(read(25u, arr), 21u))
    let b36 = or(shl(read(34u, arr), 15u), shr(read(35u, arr), 17u))
    let b37 = or(shl(read(35u, arr), 15u), shr(read(34u, arr), 17u))
    let b18 = or(shl(read(45u, arr), 29u), shr(read(44u, arr),  3u))
    let b19 = or(shl(read(44u, arr), 29u), shr(read(45u, arr),  3u))
    let b10 = or(shl(read(6u,  arr), 28u), shr(read(7u,  arr),  4u))
    let b11 = or(shl(read(7u,  arr), 28u), shr(read(6u,  arr),  4u))
    let b42 = or(shl(read(17u, arr), 23u), shr(read(16u, arr),  9u))
    let b43 = or(shl(read(16u, arr), 23u), shr(read(17u, arr),  9u))
    let b24 = or(shl(read(26u, arr), 25u), shr(read(27u, arr),  7u))
    let b25 = or(shl(read(27u, arr), 25u), shr(read(26u, arr),  7u))
    let b06 = or(shl(read(36u, arr), 21u), shr(read(37u, arr), 11u))
    let b07 = or(shl(read(37u, arr), 21u), shr(read(36u, arr), 11u))
    let b38 = or(shl(read(47u, arr), 24u), shr(read(46u, arr),  8u))
    let b39 = or(shl(read(46u, arr), 24u), shr(read(47u, arr),  8u))
    let b30 = or(shl(read(8u,  arr), 27u), shr(read(9u,  arr),  5u))
    let b31 = or(shl(read(9u,  arr), 27u), shr(read(8u,  arr),  5u))
    let b12 = or(shl(read(18u, arr), 20u), shr(read(19u, arr), 12u))
    let b13 = or(shl(read(19u, arr), 20u), shr(read(18u, arr), 12u))
    let b44 = or(shl(read(29u, arr), 07u), shr(read(28u, arr), 25u))
    let b45 = or(shl(read(28u, arr), 07u), shr(read(29u, arr), 25u))
    let b26 = or(shl(read(38u, arr), 08u), shr(read(39u, arr), 24u))
    let b27 = or(shl(read(39u, arr), 08u), shr(read(38u, arr), 24u))
    let b08 = or(shl(read(48u, arr), 14u), shr(read(49u, arr), 18u))
    let b09 = or(shl(read(49u, arr), 14u), shr(read(48u, arr), 18u))

    let arr = write(0u,  xor(b00, and(not(b02), b04)), arr)
    let arr = write(1u,  xor(b01, and(not(b03), b05)), arr)
    let arr = write(10u, xor(b10, and(not(b12), b14)), arr)
    let arr = write(11u, xor(b11, and(not(b13), b15)), arr)
    let arr = write(20u, xor(b20, and(not(b22), b24)), arr)
    let arr = write(21u, xor(b21, and(not(b23), b25)), arr)
    let arr = write(30u, xor(b30, and(not(b32), b34)), arr)
    let arr = write(31u, xor(b31, and(not(b33), b35)), arr)
    let arr = write(40u, xor(b40, and(not(b42), b44)), arr)
    let arr = write(41u, xor(b41, and(not(b43), b45)), arr)
    let arr = write(2u,  xor(b02, and(not(b04), b06)), arr)
    let arr = write(3u,  xor(b03, and(not(b05), b07)), arr)
    let arr = write(12u, xor(b12, and(not(b14), b16)), arr)
    let arr = write(13u, xor(b13, and(not(b15), b17)), arr)
    let arr = write(22u, xor(b22, and(not(b24), b26)), arr)
    let arr = write(23u, xor(b23, and(not(b25), b27)), arr)
    let arr = write(32u, xor(b32, and(not(b34), b36)), arr)
    let arr = write(33u, xor(b33, and(not(b35), b37)), arr)
    let arr = write(42u, xor(b42, and(not(b44), b46)), arr)
    let arr = write(43u, xor(b43, and(not(b45), b47)), arr)
    let arr = write(4u,  xor(b04, and(not(b06), b08)), arr)
    let arr = write(5u,  xor(b05, and(not(b07), b09)), arr)
    let arr = write(14u, xor(b14, and(not(b16), b18)), arr)
    let arr = write(15u, xor(b15, and(not(b17), b19)), arr)
    let arr = write(24u, xor(b24, and(not(b26), b28)), arr)
    let arr = write(25u, xor(b25, and(not(b27), b29)), arr)
    let arr = write(34u, xor(b34, and(not(b36), b38)), arr)
    let arr = write(35u, xor(b35, and(not(b37), b39)), arr)
    let arr = write(44u, xor(b44, and(not(b46), b48)), arr)
    let arr = write(45u, xor(b45, and(not(b47), b49)), arr)
    let arr = write(6u,  xor(b06, and(not(b08), b00)), arr)
    let arr = write(7u,  xor(b07, and(not(b09), b01)), arr)
    let arr = write(16u, xor(b16, and(not(b18), b10)), arr)
    let arr = write(17u, xor(b17, and(not(b19), b11)), arr)
    let arr = write(26u, xor(b26, and(not(b28), b20)), arr)
    let arr = write(27u, xor(b27, and(not(b29), b21)), arr)
    let arr = write(36u, xor(b36, and(not(b38), b30)), arr)
    let arr = write(37u, xor(b37, and(not(b39), b31)), arr)
    let arr = write(46u, xor(b46, and(not(b48), b40)), arr)
    let arr = write(47u, xor(b47, and(not(b49), b41)), arr)
    let arr = write(8u,  xor(b08, and(not(b00), b02)), arr)
    let arr = write(9u,  xor(b09, and(not(b01), b03)), arr)
    let arr = write(18u, xor(b18, and(not(b10), b12)), arr)
    let arr = write(19u, xor(b19, and(not(b11), b13)), arr)
    let arr = write(28u, xor(b28, and(not(b20), b22)), arr)
    let arr = write(29u, xor(b29, and(not(b21), b23)), arr)
    let arr = write(38u, xor(b38, and(not(b30), b32)), arr)
    let arr = write(39u, xor(b39, and(not(b31), b33)), arr)
    let arr = write(48u, xor(b48, and(not(b40), b42)), arr)
    let arr = write(49u, xor(b49, and(not(b41), b43)), arr)

    let arr = update(0u, xor(read(n, Keccak.RC)), arr)
    let arr = update(1u, xor(read(add(n, 1u), Keccak.RC)), arr)
    arr
  Keccak.uncompress(arr)

Keccak.hash(bytes: String): String
  let buf = Buffer32.alloc(8)
  def nil = (i, buf)
    let i = U32.mod(i, 136u)
    let buf = Buffer32.mut(i, U32.xor(1u), buf)
    let buf = Buffer32.mut(135u, U32.xor(128u), buf)
    Keccak.f(buf)
  def cons = (byte, rec, i, buf)
    let i = U32.mod(i, 136u)
    if U32.eql(i, 135u)
    then rec(U32.add(1u, i), Keccak.f(Buffer32.mut(i, U32.xor(U16.to_u32(byte)), buf)))
    else rec(U32.add(1u, i), Buffer32.mut(i, U32.xor(U16.to_u32(byte)), buf));
  let buf = String.fold(bytes)<U32 -> Buffer32 -> Buffer32>(nil, cons, 0u, buf)
  let str = String.nil
  for i : U32 = 0u .. 32u with str:
    let b = U32.to_nat(U32.mod(Buffer32.get(i, buf), 256u))
    String.concats(2, str, Nat.to_string_base(16, b))
  str
